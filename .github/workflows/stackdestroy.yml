name: "Infrastructure stack delete"
# on:
#  push:
#    branches:
#     - "master"
#    paths:
#     - "terraform/**"
#  pull_request:
#    branches:
#     - "master"
#    paths:
#     - "terraform/**"
on: workflow_dispatch
# permissions:
#   pull-requests: write
  


env:
 # verbosity setting for Terraform logs--test
 TF_LOG: INFO
 # Credentials for deployment to AWS
 aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
 aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
 # S3 bucket for the Terraform state
 BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }} 

jobs:
 terraform:
   name: "CI/CD Infrastructure Delete Workflow"
   runs-on: ubuntu-22.04
   defaults:
     run:
       shell: bash
       # We keep Terraform files in the terraform directory.
       working-directory: ./terraform

   steps:
     - name: Checkout the repository to the runner
       uses: actions/checkout@v2

     - name: Configure AWS Credentials
       uses: aws-actions/configure-aws-credentials@v1
       with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

     - name: Test configuration of AWS CLI
       run: |
        aws --version
        aws configure list | grep region | awk '{print $2}'
 
     - name: Setup Terraform with specified version on the runner
       uses: hashicorp/setup-terraform@v2
       with:
         terraform_version: 1.3.5

     - name: Terraform init
       id: init
       run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

    #  - name: Terraform format
    #    id: fmt
    #    run: terraform fmt -check

    #  - name: Terraform validate
    #    id: validate
    #    run: terraform validate

     - name: Terraform destroy
       id: destroy       
       run: terraform destroy -auto-approve -no-color -input=false
       continue-on-error: true

    

    #  - uses: actions/github-script@v6

    #    if: github.event_name == 'pull_request'

    #    env:

    #      PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"

    #    with:

    #      script: |

    #        const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`

    #        #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`

    #        #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

    #        #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

 

    #        <details><summary>Show Plan</summary>

 

    #        \`\`\`\n

    #        ${process.env.PLAN}

    #        \`\`\`

 

    #        </details>

    #        *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

 

    #        github.rest.issues.createComment({

    #          issue_number: context.issue.number,

    #          owner: context.repo.owner,

    #          repo: context.repo.repo,

    #          body: output

    #        })

 

    #  - name: Terraform Plan Status

    #    if: steps.plan.outcome == 'failure'

    #    run: exit 1

 

    #  - name: Terraform Apply

    #    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    #    run: terraform apply -auto-approve -input=false